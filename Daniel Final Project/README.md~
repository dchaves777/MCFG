# MCFG Grammar

This project contains a package to parse and recognize sentences generated by multi context free grammars.  
The best way to import the package is:  

`from MCFGGrammar import *`  

## Building the grammar

To build the grammar, the easiest approach is to read a list of rules from string.  

### Creating an individual rule from string

An individual rule can be created from a single-line string `rule` using the format:  
  
`MCFGRule.from_string(rule)`

The format of `rule` must be as follows:

*example:*  
`'A(w1u, x1v) -> B(w1, x1) C(u, v)'`  

- The left side, `A(w1u, x1v)` has a symbol A, and not necessarily adjacent string variables `w1u` and `x1v`.  
- Adjacent string variables must not be separated by a comma.  
- The left side must be separated from the right side by an arrow `->`.  
- The right side has two elements, which in turn have string variables formatted in the same way.

If the rule is an axiom, then there is only a left side.  

*example:*  
`'A(word)'`  

In this case, the string variable word is of type A.

### Creating a grammar from string

It is possible to instantiate your parser from a multi-line string, in which rules are separated by line breaks.

The following code generates a parser `parser` using a multi-line string `rules` representing the rules of a grammar.

`parser = MCFGGrammar.from_string(rules)`

The default start variable is `'S'`; however, this can be changed by specifying `start_variable = 'S'` with the appropriate start symbol, not including string variables.  
Using this method to create a parser does not require that the alphabet or variables be specified, but there may be no alphabet members (string variables of axioms) in the set of variables (the left sides of rules).  

### Creating a grammar from rules

If a parser is created from individual rules, it is first necessary to create a grammar `grammar` from a set of rules, alphabet, variables, and specify the start variable:  
  
`grammar = MCFGGrammar(rules, start_variable, alphabet, variables)`

This `grammar` will also be able to recognize and parse when called.

## Recognizing

To recognize a sentence `sentence` generated from the grammar, use the following format:  
  
`parser(sentence)`  
or  
`grammar(sentence)`  

This returns a boolean `True` if the sentence can be generated from the grammar.  

`sentence` must be a list of strings.  

## Parsing

To parse a sentence `sentence` generated from the grammar, use the following format:  
  
`parser(sentence, mode = "parse")`  
or  
`grammar(sentence, mode = "parse")`  

This returns a set of all the trees of that sentence, given the grammar.  

As before, `sentence` must be a list of strings.  

## Tree representations

Trees are represented non-linearly, with string indices to indicate the span of a surface form corresponding to the constituent.  
